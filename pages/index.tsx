import { useEffect, useState } from 'react';

import { GetStaticProps } from 'next'
import Image from 'next/image'
import Head from 'next/head'

import { IPopularProps, IPopular, IGenreProps, IGenre, IMovieCategoryProps, IMovieCategory } from '../interfaces/'

import styles from '../styles/home.module.scss'
import Header from './components/Header';
import CardCarousel from './components/CardCarousel';
import { Toaster } from 'react-hot-toast'

import Carousel from "react-multi-carousel";
import { GiPistolGun, GiTreasureMap, GiDramaMasks } from 'react-icons/gi'
import { RiReactjsLine } from 'react-icons/ri'
import { BiCubeAlt } from 'react-icons/bi'
import { MdFamilyRestroom } from 'react-icons/md'
import { FaDragon, FaLaughBeam } from 'react-icons/fa'
import { SiGhostery } from 'react-icons/si'

import axios from 'axios';

interface IHomeProps {
  results: IPopular[];
  genresStatic: IGenre[];
  allGenres: IGenre[];
  movieCategory: IMovieCategory[];
}

const Home = ({ results, genresStatic, allGenres, movieCategory }: IHomeProps) => {
  const [currentMovie, setCurrentMovie] = useState<number>(1);
  const [resultsLength, setResultsLength] = useState<number>(0);
  const [search, setSearch] = useState<string>('');
  const [countPages, setCountPages] = useState<number>(1);
  const [searchResults, setSearchResults] = useState<IMovieCategory[]>([]);
  const [allGenreSelected, setAllGenreSelected] = useState([]);

  const urlImage = 'https://image.tmdb.org/t/p/w500'

  const responsive = {
    desktop: {
      breakpoint: { max: 3000, min: 1024 },
      items: 8
    },
    tablet: {
      breakpoint: { max: 1024, min: 464 },
      items: 4
    },
    mobile: {
      breakpoint: { max: 464, min: 0 },
      items: 2,
    }
  };

  // const handleSearch = async () => {
  //   try {
  //     const response = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=fa73aa778f5176e841d79af58c2b5862&query=${search}&page=${countPages}`);
  //     setSearchResults(response.data.results);
  //     document.getElementById('categories').scrollIntoView();
  //   } catch (error) { console.log(error); }
  // }

  const sendIndex = (boolean: boolean) => {
    if (currentMovie === -resultsLength + 1) {
      setCurrentMovie(0)
      return
    }
    if (!boolean && currentMovie < 0) {
      setCurrentMovie(-1)
    }
    if (boolean && currentMovie === resultsLength - 1) {
      setCurrentMovie(0)
      return
    }
    boolean ? setCurrentMovie(currentMovie + 1) : setCurrentMovie(currentMovie - 1)
  }

  useEffect(() => {
    setResultsLength(results.length - 1)
  }, [currentMovie]);

  // useEffect(() => {
  //   handleSearch()
  // }, [countPages]);

  return (
    <div className={styles.container} id="home">
      <Head>
        <title>Here&apos;s The Movie</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link href="https://fonts.googleapis.com/css2?family=Poppins&family=Roboto:wght@400;700&display=swap" rel="stylesheet"></link>
      </Head>

      {/* <Header
        search={search}
        onChange={(e) => setSearch(e.target.value)}
        onClick={() => handleSearch()}
      /> */}
      <Toaster position="top-right" reverseOrder={false} />

      <section className={styles.slidePopular}>
        <div className={styles.slide}>
          <div className={styles.lastImage}>
            <Image
              src={
                currentMovie === 0
                  ? `${urlImage}${results.at(currentMovie - 1)?.backdrop_path}`
                  : currentMovie > 0 ? `${urlImage}${results[currentMovie - 1]?.backdrop_path}`
                    : `${urlImage}${results.at(currentMovie - 1)?.backdrop_path}`
              }
              width={500} height={300}
              objectFit="contain"
              draggable={false}
            />
          </div>
          <div key={results[currentMovie]?.id} className={styles.currentMovie} id="slide">
            <Image
              className={styles.popularImage}
              src={
                currentMovie >= 0
                  ? `${urlImage}${results[currentMovie]?.backdrop_path}` : `${urlImage}${results.at(currentMovie)?.backdrop_path}`
              }
              width={500} height={300}
              objectFit="contain"
              draggable={false}
            />

            <div>
              <h3>
                {
                  currentMovie >= 0
                    ? results[currentMovie]?.title
                    : results.at(currentMovie)?.title
                }
              </h3>
              <p>{
                currentMovie >= 0
                  ? results[currentMovie]?.overview
                  : results.at(currentMovie)?.overview
              }</p>
            </div>
            <button className={styles.prev} onClick={() => sendIndex(false)} >&#10094;</button>
            <button className={styles.next} onClick={() => sendIndex(true)}>&#10095;</button>
          </div>
          <div className={styles.nextImage}>
            <Image
              src={
                currentMovie < 0 ? `${urlImage}${results.at(currentMovie + 1)?.backdrop_path}` : `${urlImage}${results[currentMovie + 1]?.backdrop_path}`
              }
              width={500} height={300}
              objectFit="contain"
              draggable={false}
            />
          </div>
        </div>
      </section>


      {
        genresStatic.map(genre => {
          return (
            <section key={genre.id} className="categories">
              <span><h2>{genre.name}</h2></span>
              <Carousel
                responsive={responsive}
                draggable={false}
                itemClass="movie"
                containerClass="carousel"
                swipeable={false}
                partialVisible={true}
                ssr={true}
                infinite={true}
              >
                {movieCategory.map(movie => {
                  return (
                    movie.genre_ids.includes(genre.id) && (
                      <CardCarousel key={movie.id} categories={movie} />
                    ))
                }
                )}
              </Carousel>
            </section>
          )
        })
      }
    </div >
  )
}


export const getStaticProps: GetStaticProps = async () => {
  // try {
    const genreMovies = ['Action', 'Adventure', 'Animation', 'Comedy', 'Drama', 'Family', 'Fantasy', 'Horror', 'Science Fiction'];

    const popular = await axios.get<IPopularProps>(`${process.env.apiUrl}/movie/popular?api_key=${process.env.apiKey}`);
    const genres = await axios.get<IGenreProps>(`${process.env.apiUrl}/genre/movie/list?api_key=${process.env.apiKey}`);

    const movieCategoryPage01 = await axios.get<IMovieCategoryProps>(`
  ${process.env.apiUrl}/discover/movie?api_key=${process.env.apiKey}&with_genres=${genres.data.genres.filter(genre => genreMovies.includes(genre.name))}&page=1`
    );
    const movieCategoryPage02 = await axios.get<IMovieCategoryProps>(`
  ${process.env.apiUrl}/discover/movie?api_key=${process.env.apiKey}&with_genres=${genres.data.genres.filter(genre => genreMovies.includes(genre.name))}&page=2`
    );
    const movieCategoryPage03 = await axios.get<IMovieCategoryProps>(`
  ${process.env.apiUrl}/discover/movie?api_key=${process.env.apiKey}&with_genres=${genres.data.genres.filter(genre => genreMovies.includes(genre.name))}&page=3`
    );

    const movieCategory = [...movieCategoryPage01.data.results, ...movieCategoryPage02.data.results, ...movieCategoryPage03.data.results]

    return {
      props: {
        results: popular.data.results,
        genresStatic: genres.data.genres.filter(genre => genreMovies.includes(genre.name)),
        allGenres: genres.data.genres,
        movieCategory: movieCategory,
      }
    }
  // } catch (error) {
  //   console.log('This error ', error);
  // }

}

export default Home;
